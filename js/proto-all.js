'use strict'; // code generated by pbf v3.2.1

// ErrorServer ========================================

var ErrorServer = self.ErrorServer = {};

ErrorServer.read = function (pbf, end) {
    return pbf.readFields(ErrorServer._readField, {title: "", message: ""}, end);
};
ErrorServer._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.message = pbf.readString();
};
ErrorServer.write = function (obj, pbf) {
    if (obj.title) pbf.writeStringField(1, obj.title);
    if (obj.message) pbf.writeStringField(2, obj.message);
};

// User ========================================

var User = self.User = {};

User.read = function (pbf, end) {
    return pbf.readFields(User._readField, {id: 0, name: ""}, end);
};
User._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.name = pbf.readString();
};
User.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.name) pbf.writeStringField(2, obj.name);
};

// Room ========================================

var Room = self.Room = {};

Room.read = function (pbf, end) {
    return pbf.readFields(Room._readField, {id: 0, name: "", password: false, players: 0}, end);
};
Room._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.password = pbf.readBoolean();
    else if (tag === 4) obj.players = pbf.readVarint();
};
Room.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.password) pbf.writeBooleanField(3, obj.password);
    if (obj.players) pbf.writeVarintField(4, obj.players);
};

// Handshake ========================================

var Handshake = self.Handshake = {};

Handshake.read = function (pbf, end) {
    return pbf.readFields(Handshake._readField, {name: ""}, end);
};
Handshake._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
};
Handshake.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
};

// Rooms ========================================

var Rooms = self.Rooms = {};

Rooms.read = function (pbf, end) {
    return pbf.readFields(Rooms._readField, {rooms: []}, end);
};
Rooms._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.rooms.push(Room.read(pbf, pbf.readVarint() + pbf.pos));
};
Rooms.write = function (obj, pbf) {
    if (obj.rooms) for (var i = 0; i < obj.rooms.length; i++) pbf.writeMessage(1, Room.write, obj.rooms[i]);
};

// Users ========================================

var Users = self.Users = {};

Users.read = function (pbf, end) {
    return pbf.readFields(Users._readField, {users: [], me: 0}, end);
};
Users._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.users.push(User.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.me = pbf.readVarint();
};
Users.write = function (obj, pbf) {
    if (obj.users) for (var i = 0; i < obj.users.length; i++) pbf.writeMessage(1, User.write, obj.users[i]);
    if (obj.me) pbf.writeVarintField(2, obj.me);
};

// CreateRoom ========================================

var CreateRoom = self.CreateRoom = {};

CreateRoom.read = function (pbf, end) {
    return pbf.readFields(CreateRoom._readField, {name: "", password: ""}, end);
};
CreateRoom._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.password = pbf.readString();
};
CreateRoom.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.password) pbf.writeStringField(2, obj.password);
};

// JoinRoom ========================================

var JoinRoom = self.JoinRoom = {};

JoinRoom.read = function (pbf, end) {
    return pbf.readFields(JoinRoom._readField, {id: 0, password: ""}, end);
};
JoinRoom._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.password = pbf.readString();
};
JoinRoom.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.password) pbf.writeStringField(2, obj.password);
};

// Chat ========================================

var Chat = self.Chat = {};

Chat.read = function (pbf, end) {
    return pbf.readFields(Chat._readField, {name: "", message: ""}, end);
};
Chat._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.message = pbf.readString();
};
Chat.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.message) pbf.writeStringField(2, obj.message);
};

// QuitLobby ========================================

var QuitLobby = self.QuitLobby = {};

QuitLobby.read = function (pbf, end) {
    return pbf.readFields(QuitLobby._readField, {}, end);
};
QuitLobby._readField = function (tag, obj, pbf) {
};
QuitLobby.write = function (obj, pbf) {
};

// Entity ========================================

var Entity = self.Entity = {};

Entity.read = function (pbf, end) {
    return pbf.readFields(Entity._readField, {id: 0, x: 0, y: 0}, end);
};
Entity._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.x = pbf.readFloat();
    else if (tag === 3) obj.y = pbf.readFloat();
};
Entity.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.x) pbf.writeFloatField(2, obj.x);
    if (obj.y) pbf.writeFloatField(3, obj.y);
};

// State ========================================

var State = self.State = {};

State.read = function (pbf, end) {
    return pbf.readFields(State._readField, {entities: []}, end);
};
State._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.entities.push(Entity.read(pbf, pbf.readVarint() + pbf.pos));
};
State.write = function (obj, pbf) {
    if (obj.entities) for (var i = 0; i < obj.entities.length; i++) pbf.writeMessage(1, Entity.write, obj.entities[i]);
};

// GameInput ========================================

var GameInput = self.GameInput = {};

GameInput.read = function (pbf, end) {
    return pbf.readFields(GameInput._readField, {up: false, down: false, left: false, right: false}, end);
};
GameInput._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.up = pbf.readBoolean();
    else if (tag === 2) obj.down = pbf.readBoolean();
    else if (tag === 3) obj.left = pbf.readBoolean();
    else if (tag === 4) obj.right = pbf.readBoolean();
};
GameInput.write = function (obj, pbf) {
    if (obj.up) pbf.writeBooleanField(1, obj.up);
    if (obj.down) pbf.writeBooleanField(2, obj.down);
    if (obj.left) pbf.writeBooleanField(3, obj.left);
    if (obj.right) pbf.writeBooleanField(4, obj.right);
};
